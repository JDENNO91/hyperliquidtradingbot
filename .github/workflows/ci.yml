name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist

    - name: 🧪 Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: 🔧 Install linting tools
      run: |
        pip install flake8 black isort mypy

    - name: 🔍 Run flake8
      run: flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: 🎨 Run black
      run: black --check src/ tests/

    - name: 📝 Run isort
      run: isort --check-only src/ tests/

    - name: 🔍 Run mypy
      run: mypy src/ --ignore-missing-imports

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: 🔧 Install security tools
      run: |
        pip install bandit safety

    - name: 🔒 Run bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json

    - name: 🔒 Run safety check
      run: safety check --json --output safety-report.json

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: 🔧 Install build tools
      run: |
        pip install build twine

    - name: 🏗️ Build package
      run: python -m build

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: 🏗️ Build Docker image
      run: |
        docker build -t hyperliquid-trading-bot:latest .

    - name: 🧪 Test Docker image
      run: |
        docker run --rm hyperliquid-trading-bot:latest python -c "import sys; print('Python version:', sys.version)"

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: 🔧 Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-benchmark

    - name: ⚡ Run performance tests
      run: |
        pytest tests/test_performance.py -v --benchmark-only

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🚀 Automated release from CI/CD pipeline
          
          ## Changes
          - Automated build and test
          - Security scan passed
          - Performance tests passed
          
          ## Installation
          ```bash
          git clone https://github.com/${{ github.repository }}
          cd hyperliquid
          ./setup.sh
          ```
        draft: false
        prerelease: false